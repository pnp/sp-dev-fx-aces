{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "ACE connected to Microsoft Graph",
  "steps": [
    {
      "title": "Introduction",
      "description": "### Introduction\n\nThis code tour will walk you through the process of connecting an Adaptive Card Extension (ACE) for Microsoft Viva Connections to Microsoft Graph. After you complete this tour, you'll have a functioning ACE that loads data from Microsoft Graph and shows it on the card- and quick view.\n\nFor more information about how to extend Viva Connections, see https://docs.microsoft.com/sharepoint/dev/spfx/viva/overview-viva-connections"
    },
    {
      "file": "src/adaptiveCardExtensions/ace/AceAdaptiveCardExtension.ts",
      "description": "### Define state object\n\nDefine the object to store the data that you retrieve from Microsoft Graph and want to show in the Adaptive Card Extension. You'll be able to access this object from the card- and quick View. This state object is similar to how you'd define state in a React component.",
      "line": 14,
      "title": "Define state object",
      "selection": {
        "start": {
          "line": 12,
          "character": 1
        },
        "end": {
          "line": 14,
          "character": 2
        }
      }
    },
    {
      "file": "src/adaptiveCardExtensions/ace/AceAdaptiveCardExtension.ts",
      "description": "### Call Microsoft Graph to get data\n\nCall Microsoft Graph to retrieve data that you'd like to show in the Adaptive Card Extension. In the `api()` method, specify the endpoint of the Microsoft Graph that you'd like to call. If you need to, you can call Microsoft Graph multiple times and combine all the data you retrieved in a single result.\n\nTake note of the Microsoft Graph endpoints that you're calling here. You'll need this information later to request the necessary permissions for your Adaptive Card Extension to be able to call these endpoints.\n\nMore information: https://docs.microsoft.com/sharepoint/dev/spfx/use-msgraph",
      "line": 57,
      "selection": {
        "start": {
          "line": 57,
          "character": 23
        },
        "end": {
          "line": 57,
          "character": 45
        }
      }
    },
    {
      "file": "src/adaptiveCardExtensions/ace/AceAdaptiveCardExtension.ts",
      "description": "### Update state\n\nAfter you retrieved data from Microsoft Graph, and are ready to display it on the ACE, call the `this.setState()` method and update your state object with the retrieved data. It will cause the ACE to re-render and show the data on card- and quick view.",
      "line": 61,
      "selection": {
        "start": {
          "line": 59,
          "character": 9
        },
        "end": {
          "line": 61,
          "character": 12
        }
      }
    },
    {
      "file": "config/package-solution.json",
      "description": "### Request permissions\n\nBefore an Adaptive Card Extension can call Microsoft Graph, it must request permissions. Add here permission scopes for the Microsoft Graph endpoints that you've called in the previous step. You can get permission scopes from the [Microsoft Graph API documentation](https://docs.microsoft.com/graph/api/overview?view=graph-rest-1.0). If you need to specify multiple scopes, separate them with a space, eg. `User.Read Calendar.Read`.\n\nPermissions that you specify in this section, will be requested when you deploy the solution package to the app catalog. Tenant admin will need to review and approve the request, before your solution will be able to connect to Microsoft Graph.\n\nMore information: https://docs.microsoft.com/sharepoint/dev/spfx/use-msgraph#available-permission-scopes",
      "line": 39,
      "selection": {
        "start": {
          "line": 39,
          "character": 19
        },
        "end": {
          "line": 39,
          "character": 28
        }
      }
    },
    {
      "file": "src/adaptiveCardExtensions/ace/cardView/CardView.ts",
      "description": "### Show data on the card view\n\nAssign the data, that you retrieved from Microsoft Graph, to properties that are mapped to the card view. The state object, that you defined previously, is accessible through `this.state`. The properties `primaryText` and `title` are fixed and correspond to properties on the card that's displayed in the card view.",
      "line": 30,
      "selection": {
        "start": {
          "line": 27,
          "character": 12
        },
        "end": {
          "line": 30,
          "character": 6
        }
      }
    },
    {
      "file": "src/adaptiveCardExtensions/ace/quickView/QuickView.ts",
      "description": "### Show data on the quick view\n\nAssign the data, that you retrieved from Microsoft Graph, to properties that are mapped to the quick view. The state object, that you defined previously, is accessible through `this.state`. The properties `primaryText` and `title` correspond to properties on the card that are defined in the [card template](./src/adaptiveCardExtensions/ace/quickView/template/QuickViewTemplate.json).",
      "line": 19,
      "selection": {
        "start": {
          "line": 16,
          "character": 12
        },
        "end": {
          "line": 19,
          "character": 6
        }
      }
    },
    {
      "file": "config/serve.json",
      "description": "### Update tenant URL\n\nUpdate the URL of your SharePoint tenant. This URL is used to launch the workbench and preview your ACE during development.",
      "line": 5,
      "selection": {
        "start": {
          "line": 5,
          "character": 19
        },
        "end": {
          "line": 5,
          "character": 49
        }
      }
    },
    {
      "title": "Preview",
      "description": "### Preview your ACE\n\nCongratulations! You've arrived at the end of this code tour. The last thing left is to see your ACE in action.\n\n[Preview ACE in the workbench](command:viva-connections-toolkit.executeTerminalCommand?[\"gulp%20serve\"])\n"
    }
  ]
}